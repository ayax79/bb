package {	import flash.media.Microphone;	import flash.media.Camera;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.events.Event;	import flash.events.NetStatusEvent;	import flash.events.MouseEvent;	import flash.display.Sprite;	import flash.display.BitmapData;	import flash.display.Bitmap;	import flash.utils.ByteArray;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.geom.Matrix;	import fl.transitions.Tween;	import fl.transitions.TweenEvent;	import fl.transitions.easing.*;	import flash.external.ExternalInterface;		import flash.net.*;	import com.adobe.images.PNGEncoder;	import com.dynamicflash.util.Base64;	public class StillCamera extends Sprite {		private const CAM_WIDTH:uint=500;		private const CAM_HEIGHT:uint=330;		private const CAM_FPS:uint=15;		private const CAM_QUALITY:uint=100;		private const SERVER_ADDRESS:String="rtmp://localhost/oflaDemo";		private var camera:Camera;		private var video:Video;		private var microphone:Microphone;		private var stream:NetStream;		private var connection:NetConnection;		private var recordButton:RecordButton;		private var counter:Counter;		private var myTimer:Timer;		private var snapShot:Bitmap;		private var flasher:Sprite;		private var tween:Tween;		public function StillCamera() {			myTimer=new Timer(1000,3);			myTimer.addEventListener(TimerEvent.TIMER, updateCounter);			myTimer.addEventListener(TimerEvent.TIMER_COMPLETE, recordVideo);			configMediaInputs();						createButtons();			snapShot = new Bitmap();						if (ExternalInterface.available) {				try {					ExternalInterface.addCallback("submit", submit);					ExternalInterface.addCallback("destroy", destroy);				} catch (error:SecurityError) {					//				} catch (error:Error) {					//				}			} else {				//			}						flasher = new Sprite();			flasher.graphics.beginFill(0xFFFFFF,1);			flasher.graphics.drawRect(0,0,CAM_WIDTH, CAM_HEIGHT);			flasher.graphics.endFill();			flasher.alpha = 0;			addChild(flasher);		}		private function submit(args:Object):void {			var myParams:Object = args.params;			var variables:URLVariables = new URLVariables();			for(var i:* in myParams) {				variables[myParams[i].name] = myParams[i].value;			}						var ping:ByteArray = PNGEncoder.encode(snapShot.bitmapData);			var base64:String = Base64.encodeByteArray(ping);			variables["base64"] = base64;			var myData:URLRequest = new URLRequest(args.action);			myData.method = URLRequestMethod.POST;			myData.data = variables;						var loader:URLLoader = new URLLoader();			loader.dataFormat = URLLoaderDataFormat.TEXT;			loader.addEventListener(Event.COMPLETE, dataOnLoad);			loader.load(myData);        }				public function dataOnLoad(e:Event):void {						this.destroy();						try {				ExternalInterface.call("Publisher.proxyCall", ExternalInterface.objectID, "processResponse", e.target.data);				ExternalInterface.call("Publisher.proxyCall", ExternalInterface.objectID, "close", null);			} catch(e) {				ExternalInterface.call("alert", "error: " + e);			};		}				private function startTimer(e:MouseEvent):void {			counter.label.text="3";			createWebcam();			myTimer.reset();			myTimer.start();			showCountDown();		}		private function updateCounter(e:TimerEvent) {			if (e.target.currentCount!=3) {			}			counter.label.text = (3-e.target.currentCount).toString();		}		private function recordVideo(e:TimerEvent):void {			try {				ExternalInterface.call("Publisher.proxyCall", ExternalInterface.objectID, "enable");			} catch(e) {};						showRecordButtons();						var bmd:BitmapData=new BitmapData(CAM_WIDTH,CAM_HEIGHT,false);			bmd.draw(video, new Matrix());			snapShot.bitmapData=bmd;			addChild(snapShot);			flasher.parent.setChildIndex(flasher, flasher.parent.numChildren-1);			flasher.alpha = 0;			var myFlasher:Sprite = flasher;			if(tween) {				tween.stop();			}			tween = new Tween(flasher,"alpha", Strong.easeOut,1,0,1, true);			var fucker:Function = function(e:TweenEvent)			{				myFlasher.alpha = 0;			};								}		private function createButtons():void {			recordButton = new RecordButton();			recordButton.x=CAM_WIDTH/2;			recordButton.y=CAM_HEIGHT+20;			addChild(recordButton);			counter = new Counter();			counter.x=CAM_WIDTH/2;			counter.y=CAM_HEIGHT+20;			addChild(counter);			counter.visible=false;			recordButton.addEventListener(MouseEvent.MOUSE_UP, startTimer);		}		private function showRecordButtons() {			recordButton.visible=true;			counter.visible=false;		}		private function showCountDown() {			recordButton.visible=false;			counter.visible=true;		}				function createWebcam() {			if (video!==null) {				//video.clear();				//video.attachCamera(null);				removeChild(video);			}			video=new Video(CAM_WIDTH,CAM_HEIGHT);			video.attachCamera(camera);			//video.mask=VidMask;			addChild(video);					}				private function destroy() {			video.clear();			video.attachCamera(null);			this.removeChild(video);//			camera = null;//			video = null;//			connection.close();//			stream.close();//			connection = null;//			stream = null;//			microphone = null;//			while (this.numChildren) this.removeChildAt(0);		}		private function configMediaInputs():void {			camera=Camera.getCamera();			camera.setMode(CAM_WIDTH, CAM_HEIGHT, CAM_FPS);			camera.setQuality(0,100);			createWebcam();		}	}}