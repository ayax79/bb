package {	import flash.media.Microphone;	import flash.media.Camera;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.events.NetStatusEvent;	import flash.events.AsyncErrorEvent;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.text.TextField;	import flash.external.ExternalInterface;	import flash.net.*;	import flash.display.Sprite;	public class VideoCamera extends Sprite {		private const CAM_WIDTH:uint=320;		private const CAM_HEIGHT:uint=240;		private const CAM_FPS:uint=15;		private const CAM_QUALITY:uint=90;		private const SERVER_ADDRESS:String="rtmp://localhost/oflaDemo";		private var camera:Camera;		private var video:Video;		private var microphone:Microphone;		private var stream:NetStream;		private var connection:NetConnection;		private var recordButton:RecordButton;		private var stopButton:StopButton;		private var playButton:PlayButton;		private var resetButton:ResetButton;		private var lastVideoName:String;		public function VideoCamera() {			connection = new NetConnection();			connection.addEventListener(NetStatusEvent.NET_STATUS,handleNetStatus);			connection.addEventListener(AsyncErrorEvent.ASYNC_ERROR, handleError);			openConnection();			//Set up external interface for js/as communications			if (ExternalInterface.available) {				try {										ExternalInterface.addCallback("submit", submit);				} catch (error:SecurityError) {					//				} catch (error:Error) {					//				}			} else {				//			}		}				private function submit(args:Object):void {			var myData:URLRequest = new URLRequest("/test.jsp");			myData.method = URLRequestMethod.POST;			var variables:URLVariables = new URLVariables();						for(var i:* in args)			{				variables[i] = args[i];			}						function dataOnLoad(e:Event):void {				ExternalInterface.call("yoyo", ">>>>> " + e.target.data);			}						myData.data = variables;			var loader:URLLoader = new URLLoader();			loader.dataFormat = URLLoaderDataFormat.VARIABLES;			loader.addEventListener(Event.COMPLETE, dataOnLoad);			loader.load(myData);        }		private function handleError(e:AsyncErrorEvent):void {			// To bad, so sad... cry. cry. cry.		}		private function recordVideo(e:MouseEvent):void {			createWebcam();			stream.attachCamera(camera);			stream.attachAudio(microphone);			lastVideoName="red5RecordDemo";			stream.publish(lastVideoName, "record");			recordButton.visible=false;			stopButton.visible=true;		}		private function stopRecording(e:MouseEvent):void {			stream.close();			video.attachCamera(null);			video.clear();			showPlayButtons();		}		private function playLastVideo(event:MouseEvent=null):void {			video.attachNetStream(stream);			stream.play(lastVideoName);		}		private function resetRecorder(event:MouseEvent):void {			stream.close();			showRecordButtons();			createWebcam();		}		private function createButtons():void {			recordButton = new RecordButton();			recordButton.x=160;			recordButton.y=262;			addChild(recordButton);			stopButton = new StopButton();			stopButton.x=160;			stopButton.y=262;			addChild(stopButton);			stopButton.visible=false;			resetButton = new ResetButton();			resetButton.x=175;			resetButton.y=262;			addChild(resetButton);			resetButton.visible=false;			playButton = new PlayButton();			playButton.x=131;			playButton.y=262;			addChild(playButton);			playButton.visible=false;			recordButton.addEventListener(MouseEvent.MOUSE_UP, recordVideo);			stopButton.addEventListener(MouseEvent.MOUSE_UP, stopRecording);			playButton.addEventListener(MouseEvent.MOUSE_UP, playLastVideo);			resetButton.addEventListener(MouseEvent.MOUSE_UP, resetRecorder);		}		private function showRecordButtons() {			recordButton.visible=true;			stopButton.visible=false;			resetButton.visible=false;			playButton.visible=false;		}		private function showPlayButtons() {			recordButton.visible=false;			stopButton.visible=false;			resetButton.visible=true;			playButton.visible=true;		}		private function openConnection():void {			connection.connect("rtmp://localhost/oflaDemo");		}		private function closeConnection():void {			connection.close();		}		function createWebcam() {			if (video!==null) {				removeChild(video);			}			video=new Video(CAM_WIDTH,CAM_HEIGHT);			video.attachCamera(camera);			stream=new NetStream(connection);			stream.client={};			stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			video.mask=VidMask;			addChild(video);		}		private function configMediaInputs():void {			camera=Camera.getCamera();			camera.setMode(CAM_WIDTH, CAM_HEIGHT, CAM_FPS);			camera.setQuality(0,90);			microphone=Microphone.getMicrophone();			createWebcam();		}		function netStatusHandler(event:NetStatusEvent) {			trace(event.info.code);		}		function handleNetStatus(e:NetStatusEvent):void {			if (e.info.code=="NetConnection.Connect.Success") {				configMediaInputs();				createButtons();			}		}	}}