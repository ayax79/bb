<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2009. Blackbox, LLC
  ~ All rights reserved.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
    <!-- =========================================================
         JSecurity Core Components - Not Spring Specific
         ========================================================= -->
    <!-- JSecurity's main business-tier object for web-enabled applications
         (use org.jsecurity.mgt.DefaultSecurityManager instead when there is no web environment)-->
    <!--Single realm app.  If you have multiple realms, use the 'realms' property instead. -->

    <bean id="securityManager" class="org.apache.shiro.web.DefaultWebSecurityManager"
          p:cacheManager-ref="securityCacheManager">
        <property name="realms">
            <util:list>
                <!--<ref bean="defaultRealm"/> -->
                <ref bean="serviceRealm"/>
            </util:list>
        </property>
    </bean>

    <bean id="serviceRealm" class="com.blackbox.foundation.security.BlackboxSecurityRealm"/>

    <!--<bean id="defaultRealm" class="org.jsecurity.realm.text.PropertiesRealm"-->
    <!--p:resourcePath="classpath:/realm/default.properties" p:cacheManager-ref="securityCacheManager"/>-->

    <!--<bean id="securityCacheManager" class="org.jsecurity.cache.HashtableCacheManager"/>-->
    <bean id="securityCacheManager" class="com.blackbox.foundation.security.SecurityCacheManager" p:cache-ref="securityCache"/>
    <bean id="securityCache" class="org.yestech.cache.impl.EhCacheCacheManager" p:cache-ref="securityCacheDelagate"/>
    <bean id="securityCacheDelagate" class="org.springframework.cache.ehcache.EhCacheFactoryBean"
          p:cacheManager-ref="cacheManager" p:cacheName="securityCache"/>

    <!--<bean id="securityCache" class="org.yestech.cache.impl.InfinispanCacheManager" p:cache-ref="securityCacheDelagate"/>-->

    <!--<bean id="securityCacheDelagate" class="org.yestech.cache.spring.InfinispanFactoryBean" p:manager-ref="cacheManager"-->
    <!--p:cacheName="securityCache"/>-->


    <!-- Used by the SecurityManager to access security data (users, roles, etc).
         Many other realm implementations can be used too (PropertiesRealm,
         LdapRealm, etc. -->
    <!--<bean id="jdbcRealm" class="org.jsecurity.realm.jdbc.JdbcRealm">-->
    <!--<property name="dataSource" ref="dataSource"/>-->
    <!--<property name="credentialsMatcher">-->
    <!-- The 'bootstrapDataPopulator' Sha256 hashes the password-->
    <!--(using the username as the salt) then base64 encodes it: -->
    <!--<bean class="org.jsecurity.authc.credential.Sha256CredentialsMatcher">-->
    <!-- true means hex encoded, false means base64 encoded -->
    <!--<property name="storedCredentialsHexEncoded" value="false"/>-->
    <!-- We salt the password using the username, the most common practice: -->
    <!--<property name="hashSalted" value="true"/>-->
    <!--</bean>-->
    <!--</property>-->
    <!--</bean>-->

    <!-- =========================================================
         JSecurity Spring-specific integration
         ========================================================= -->
    <!-- Post processor that automatically invokes init() and destroy() methods
         for Spring-configured JSecurity objects so you don't have to
         1) specify an init-method and destroy-method attributes for every bean
            definition and
         2) even know which JSecurity objects require these methods to be
            called. -->
    <!--<bean id="lifecycleBeanPostProcessor" class="org.jsecurity.spring.LifecycleBeanPostProcessor"/>-->

    <!-- Enable JSecurity Annotations for Spring-configured beans.  Only run after
         the lifecycleBeanProcessor has run: -->
    <!--<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"-->
    <!--depends-on="lifecycleBeanPostProcessor"/>-->
    <!--<bean class="org.jsecurity.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"-->
    <!--p:securityManager-ref="securityManager"/>-->

    <!-- Secure Spring remoting:  Ensure any Spring Remoting method invocations can be associated-->
    <!--with a Subject for security checks. -->
    <!--<bean id="secureRemoteInvocationExecutor"-->
    <!--class="org.jsecurity.spring.remoting.SecureRemoteInvocationExecutor"-->
    <!--p:securityManager-ref="securityManager"/>-->

</beans>