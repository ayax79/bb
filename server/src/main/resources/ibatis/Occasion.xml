<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="Occasion">

    <resultMap id="SenderProfileResult" type="com.blackbox.foundation.activity.ActivityProfile">
        <result property="senderAvatarImage"/>
        <result property="senderDisplayName"/>
        <result property="senderProfileImage"/>
    </resultMap>

    <resultMap id="ParentActivityResult" type="com.blackbox.foundation.activity.ActivityReference">
        <result property="activityType" column="parentActivityType"
                javaType="com.blackbox.foundation.activity.ActivityTypeEnum"
                jdbcType="INTEGER"/>
        <result property="guid" column="parentguid"/>
        <result property="postDate" column="parentActivityPostDate" javaType="jodaDate"/>
        <result property="ownerType" column="parentOwnerType" javaType="com.blackbox.foundation.EntityType"
                jdbcType="INTEGER"/>
    </resultMap>

    <resultMap id="GeoPointResult" type="com.blackbox.foundation.geo.GeoPoint">
        <result property="latitude"/>
        <result property="longitude"/>
    </resultMap>

    <resultMap id="AddressResult" type="com.blackbox.foundation.social.Address">
        <result property="address1"/>
        <result property="address2"/>
        <result property="city"/>
        <result property="country"/>
        <result property="county"/>
        <result property="state"/>
        <result property="zipCode"/>
        <association property="geoLocation" resultMap="Occasion.GeoPointResult"/>
    </resultMap>

    <resultMap id="OccasionNotifyOption" type="com.blackbox.foundation.occasion.OccasionNotifyOption">
        <result property="guestBringFriendNbr"/>
        <result property="guestCanForward"/>
        <result property="guestMaxNbr"/>
        <result property="reminderSend1DayBeforeWRsvp"/>
        <result property="reminderSend7DaysBeforeWORsvp"/>
        <result property="reminderSendToBbxInbox"/>
        <result property="reminderSendViaEmail"/>
        <result property="thankCustomNotes"/>
        <result property="thankNotesSendViaBbx"/>
        <result property="thankNotesSendViaEmail"/>
    </resultMap>

    <resultMap id="ShallowOccasionResult" type="com.blackbox.foundation.occasion.Occasion"
               extends="BaseEntity.BaseEntityResult">
        <result property="description"/>
        <result property="location"/>
        <result property="occasionLevel" javaType="com.blackbox.foundation.occasion.OccasionLevel" jdbcType="INTEGER"/>
        <result property="postDate" javaType="jodaDate"/>
        <result property="owner.guid" column="owner_guid"/>
        <result property="status" javaType="com.blackbox.foundation.Status" jdbcType="INTEGER"/>
        <result property="totalEvents"/>
        <result property="twitterDescription"/>
        <result property="withGoogleMap"/>
        <result property="owner.guid" column="owner_guid"/>
        <association property="occasionNotifyOption" resultMap="Occasion.OccasionNotifyOption"/>
        <association property="parentActivity" resultMap="Occasion.ParentActivityResult"/>
        <association property="senderProfile" resultMap="Occasion.SenderProfileResult"/>
        <association property="address" resultMap="Occasion.AddressResult"/>
    </resultMap>

    <resultMap id="OccasionResult" type="com.blackbox.foundation.occasion.Occasion"
               extends="Occasion.ShallowOccasionResult">
        <association property="owner" select="User.loadByGuid" column="owner_guid"/>
        <association property="occasionWebDetail" select="OccasionWebDetail.load" column="occasionwebdetail_guid"/>
        <association property="layout" select="OccasionLayout.load" column="layout_guid"/>
    </resultMap>

    <delete id="delete" parameterType="string">
        delete from bb_occasion where guid = #{value}
    </delete>

    <insert id="insert" parameterType="com.blackbox.foundation.occasion.Occasion">
        insert into bb_occasion
        (address1, address2, avatarLocation, city, country, county, created, description, email, eventEndTime, eventTime,
        eventUrl, guestBringFriendNbr, guestCanForward, guestMaxNbr, hostBy, latitude, location, longitude, modified,
        name, occasionLevel, occasionType, parentActivityPostDate, parentActivityType, phoneExtension, phoneNumber,
        postDate, publishToTwitter, reminderSend1DayBeforeWRsvp, reminderSend7DaysBeforeWORsvp, reminderSendToBbxInbox,
        reminderSendViaEmail, senderAvatarImage, senderDisplayName, senderProfileImage, state, status, thankCustomNotes,
        thankNotesSendViaBbx, thankNotesSendViaEmail, totalEvents, twitterDescription, version, withgoogleMap, zipCode,
        layout_guid, occasionWebDetail_guid, owner_guid, guid)
        values
        (#{address.address1,jdbcType=VARCHAR}, #{address.address2,jdbcType=VARCHAR}, #{avatarLocation,jdbcType=VARCHAR},
        #{address.city,jdbcType=VARCHAR}, #{address.country,jdbcType=VARCHAR}, #{address.county,jdbcType=VARCHAR},
        #{created,jdbcType=DATE}, #{description,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{eventEndTime,jdbcType=DATE},
        #{eventTime,jdbcType=DATE}, #{eventUrl,jdbcType=VARCHAR}, #{occasionNotifyOption.guestBringFriendNbr,jdbcType=INTEGER},
        #{occasionNotifyOption.guestCanForward,jdbcType=BOOLEAN}, #{occasionNotifyOption.guestMaxNbr,jdbcType=INTEGER},
        #{hostBy,jdbcType=VARCHAR}, #{address.latitude,jdbcType=INTEGER}, #{location,jdbcType=VARCHAR},
        #{address.longitude,jdbcType=INTEGER},
        #{modified,jdbcType=DATE}, #{name,jdbcType=VARCHAR}, #{occasionLevel,jdbcType=INTEGER}, #{occasionType,jdbcType=INTEGER},
        #{parentActivity.postDate,jdbcType=DATE}, #{parentActivity.activityType,jdbcType=INTEGER}, #{phoneExtension,jdbcType=VARCHAR},
        #{phoneNumber,jdbcType=VARCHAR}, #{postDate,jdbcType=DATE}, #{publishToTwitter,jdbcType=BOOLEAN},
        #{occasionNotifyOption.reminderSend1DayBeforeWRsvp,jdbcType=BOOLEAN},
        #{occasionNotifyOption.reminderSend7DaysBeforeWORsvp,jdbcType=BOOLEAN},
        #{occasionNotifyOption.reminderSendToBbxInbox,jdbcType=BOOLEAN},
        #{occasionNotifyOption.reminderSendViaEmail,jdbcType=BOOLEAN},
        #{senderProfile.senderAvatarImage,jdbcType=VARCHAR}, #{senderProfile.senderDisplayName,jdbcType=VARCHAR},
        #{senderProfile.senderProfileImage,jdbcType=VARCHAR}, #{address.state,jdbcType=VARCHAR}, #{status,javaType=status,jdbcType=INTEGER},
        #{occasionNotifyOption.thankCustomNotes,jdbcType=VARCHAR}, #{occasionNotifyOption.thankNotesSendViaBbx,jdbcType=BOOLEAN},
        #{occasionNotifyOption.thankNotesSendViaEmail,jdbcType=BOOLEAN}, #{totalEvents,jdbcType=INTEGER},
        #{twitterDescription,jdbcType=VARCHAR}, #{version,jdbcType=INTEGER}, #{withGoogleMap,jdbcType=BOOLEAN},
        #{address.zipCode,jdbcType=VARCHAR}, #{layout.guid,jdbcType=VARCHAR}, #{occasionWebDetail.guid,jdbcType=VARCHAR},
        #{owner.guid,jdbcType=VARCHAR}, #{guid,jdbcType=VARCHAR})
    </insert>

    <update id="update" parameterType="com.blackbox.foundation.occasion.Occasion">
        update bb_occasion set
        address1 = #{address.address1,jdbcType=VARCHAR},
        address2 = #{address.address2,jdbcType=VARCHAR},
        avatarLocation = #{avatarLocation,jdbcType=VARCHAR},
        city = #{address.city,jdbcType=VARCHAR},
        country = #{address.country,jdbcType=VARCHAR},
        county = #{address.county,jdbcType=VARCHAR},
        description = #{description,jdbcType=VARCHAR},
        email = #{email,jdbcType=VARCHAR},
        eventEndTime = #{eventEndTime,jdbcType=DATE},
        eventTime = #{eventTime,jdbcType=DATE},
        eventUrl = #{eventUrl,jdbcType=VARCHAR},
        guestBringFriendNbr = #{occasionNotifyOption.guestBringFriendNbr,jdbcType=INTEGER},
        guestCanForward = #{occasionNotifyOption.guestCanForward,jdbcType=BOOLEAN},
        guestMaxNbr = #{occasionNotifyOption.guestMaxNbr,jdbcType=INTEGER},
        hostBy = #{hostBy,jdbcType=VARCHAR},
        latitude = #{address.latitude,jdbcType=INTEGER},
        location = #{location,jdbcType=VARCHAR},
        longitude = #{address.longitude,jdbcType=INTEGER},
        modified = #{modified,jdbcType=DATE},
        name = #{name,jdbcType=VARCHAR},
        occasionLevel = #{occasionLevel,jdbcType=INTEGER},
        occasionType = #{occasionType,jdbcType=INTEGER},
        parentActivityPostDate = #{parentActivity.postDate,jdbcType=DATE},
        parentActivityType = #{parentActivity.ownerType,jdbcType=INTEGER},
        phoneExtension = #{phoneExtension,jdbcType=VARCHAR},
        phoneNumber = #{phoneNumber,jdbcType=VARCHAR},
        postDate = #{postDate,jdbcType=DATE},
        publishToTwitter = #{publishToTwitter,jdbcType=BOOLEAN},
        reminderSend1DayBeforeWRsvp = #{occasionNotifyOption.reminderSend1DayBeforeWRsvp,jdbcType=BOOLEAN},
        reminderSend7DaysBeforeWORsvp = #{occasionNotifyOption.reminderSend7DaysBeforeWORsvp,jdbcType=BOOLEAN},
        reminderSendToBbxInbox = #{occasionNotifyOption.reminderSendToBbxInbox,jdbcType=BOOLEAN},
        reminderSendViaEmail = #{occasionNotifyOption.reminderSendViaEmail,jdbcType=BOOLEAN},
        senderAvatarImage = #{senderProfile.senderAvatarImage,jdbcType=VARCHAR},
        senderDisplayName = #{senderProfile.senderDisplayName,jdbcType=VARCHAR},
        senderProfileImage = #{senderProfile.senderProfileImage,jdbcType=VARCHAR},
        state = #{address.state,jdbcType=VARCHAR},
        status = #{status,javaType=status,jdbcType=INTEGER},
        thankCustomNotes = #{occasionNotifyOption.thankCustomNotes,jdbcType=VARCHAR},
        thankNotesSendViaBbx = #{occasionNotifyOption.thankNotesSendViaBbx,jdbcType=BOOLEAN},
        thankNotesSendViaEmail = #{occasionNotifyOption.thankNotesSendViaEmail,jdbcType=BOOLEAN},
        totalEvents = #{totalEvents,jdbcType=INTEGER},
        twitterDescription = #{twitterDescription,jdbcType=VARCHAR},
        version = #{version,jdbcType=INTEGER},
        withgoogleMap = #{withGoogleMap,jdbcType=BOOLEAN},
        zipCode = #{address.zipCode,jdbcType=VARCHAR},
        layout_guid = #{layout.guid,jdbcType=VARCHAR},
        occasionWebDetail_guid = #{occasionWebDetail.guid,jdbcType=VARCHAR},
        owner_guid = #{owner.guid,jdbcType=VARCHAR}
        where
        guid = #{guid,jdbcType=VARCHAR}
    </update>


    <select id="load" resultMap="Occasion.OccasionResult" parameterType="string">
        select * from bb_occasion where guid = #{value}
    </select>

    <select id="countAcknowledgedAndStatus" parameterType="map" resultType="int">
        select count(*) from
        bb_occasion_attendee a, bb_occasion_bb_occasion_attendee booa, bb_occasion o
        where
        a.guid = booa.attendees_guid
        and o.guid = booa.occasions_guid
        and (( a.bbxUserGuid = #{guid} and a.acknowledged = #{acknowledged} )
        or ( o.owner_guid = #{guid} and a.attendingStatus = #{status} ))
    </select>

    <select id="loadUnAcknowledged" parameterType="map" resultMap="Occasion.OccasionResult">
        select o.* from
        bb_occasion_attendee a, bb_occasion_bb_occasion_attendee booa, bb_occasion o
        where
        a.guid = booa.attendees_guid
        and o.guid = booa.occasions_guid
        and (( a.bbxUserGuid = #{guid} and a.acknowledged = #{acknowledged} )
        or ( o.owner_guid = #{guid} and a.attendingStatus = #{status} ))
    </select>

    <select id="loadbyWebUrl" parameterType="string" resultMap="Occasion.OccasionResult">
        select * from bb_occasion where eventUrl = #{value}
    </select>

    <select id="loadByOwnerGuid" parameterType="string" resultMap="Occasion.OccasionResult">
        select * from bb_occasion where owner_guid = #{value}
    </select>

    <select id="loadAttendingOccasions" resultMap="Occasion.OccasionResult" parameterType="string">
        select o.* from
        bb_occasion_attendee a, bb_occasion_bb_occasion_attendee booa, bb_occasion o
        where
        a.guid = booa.attendees_guid
        and o.guid = booa.occasions_guid
        and a.bbxUserGuid = #{value}
    </select>

    <select id="loadCreatedOccasions" resultMap="Occasion.OccasionResult" parameterType="string">
        select * from bb_occasion where owner_guid = #{value}
    </select>

    <resultMap id="SceneOccasionResult" type="com.blackbox.foundation.occasion.Occasion">
        <result property="guid"/>
        <result property="address.city" column="city"/>
        <result property="address.state" column="state"/>
        <result property="avatarLocation"/>
        <result property="name"/>
        <result property="eventTime" javaType="jodaDate"/>
    </resultMap>

    <select id="loadForScene" resultMap="Occasion.SceneOccasionResult" parameterType="map">
        select distinct
        guid as guid, city as city, state as state, avatarLocation as avatarLocation, name as name, eventTime as
        eventTime,
        (
        select count(ooa.occasions_guid)
        from
        bb_occasion_attendee oa, bb_occasion_bb_occasion_attendee ooa
        where oa.guid = ooa.attendees_guid and oa.attendingstatus = #{attendingStatus,jdbcType=INTEGER} and
        ooa.occasions_guid = o.guid
        ) as totalAttendees,
        (
        select md.thumbnaillocation
        from
        bb_occasion_layout ol, bb_media_meta_data md
        where o.layout_guid = ol.guid and ol.imageguid = md.guid
        ) as imageLocation
        from bb_occasion o
        where o.eventTime >= CURRENT_DATE and o.status = #{occasionStatus,jdbcType=INTEGER} and o.occasiontype =
        #{occasionType,jdbcType=INTEGER}
        order by eventTime asc, totalAttendees desc
        <if test="bounds != null">
            limit #{bounds.maxResults,jdbcType=INTEGER} offset #{bounds.startIndex,jdbcType=INTEGER}
        </if>
    </select>

    <select id="loadExplore" resultMap="Occasion.OccasionResult"
            parameterType="com.blackbox.foundation.search.ExploreRequest">
        select distinct o.* from
        bb_occasion o
        join bb_user u on (o.owner_guid = u.guid)
        <where>
            <!-- not private -->
            and o.occasionType != 2
            <choose>
                <when test="publicEvent and inviteOnlyEvent">
                    and o.occasionType in (0, 1)
                </when>
                <when test="publicEvent">
                    and o.occasionType = 0
                </when>
                <when test="inviteOnlyEvent">
                    and o.occasionType = 1
                </when>
            </choose>
            <if test="promoter">
                <!-- User type PROMOTER -->
                and u.type = 2
            </if>
            <if test="member">
                <!-- LIMITED,NORMAL, BLACKBOX_EMPLOYEE, BLACKBOX_ADMIN -->
                and u.type in (0,1,5,6)
            </if>
            <if test="name != null">
                and (
                lower(o.name) like lower('%'||#{name}||'%')
                or lower(o.description) like lower('%'||#{name}||'%')
                )
            </if>
            <if test="zipcode != null">
                <if test="swCorner != null and neCorner != null">
                    and (
                    o.latitude &lt;= #{neCorner.latitude}
                    and o.latitude &gt;= #{swCorner.latitude}
                    and o.longitude &lt;= #{neCorner.longitude}
                    and o.longitude &gt;= #{swCorner.longitude}
                    )
                </if>
            </if>
            <choose>
                <when test="sortType != null and sortType = 'CHRONOLOGICAL_ASC'">
                    order by o.eventtime asc
                </when>
                <otherwise>
                    order by o.eventtime desc
                </otherwise>
            </choose>
        </where>
    </select>

    <select id="loadOccasions" parameterType="com.blackbox.foundation.occasion.OccasionRequest"
            resultMap="Occasion.OccasionResult">
        select o.* from bb_occasion o, bb_user u
        where
        o.owner_guid = u.guid
        <if test="occasionTypes != null and !occasionTypes.isEmpty">
            and o.occasionTypes in
            <foreach item="item" open="(" close=")" separator="," collection="occasionTypes">#{item}</foreach>
        </if>
        <if test="ownerTypes != null and !ownerTypes.isEmpty">
            and u.type in
            <foreach open="(" close=")" separator="," collection="ownerTypes" item="item">#{item}</foreach>
        </if>
        <if test="status != null">and o.status = #{status}</if>
        <if test="url != null">and o.url</if>
        <if test="bounds != null">
            <if test="bounds.startDate != null">and o.eventTime &gt; #{bounds.startDate,jdbcType=DATE,javaType=jodaDate}
            </if>
            <if test="bounds.endDate != null">and o.eventTime &lt; #{bounds.endDate,jdbcType=DATE,javaType=jodaDate}
            </if>
        </if>
        order by eventTime desc
        <if test="bounds != null">
            <if test="bounds.maxResults != null">limit #{bounds.maxResults}</if>
            <if test="bounds.startIndex != null">offset #{bounds.startIndex}</if>
        </if>
    </select>

    <select id="loadAll" resultMap="OccasionResult">
        select * from bb_occasion
    </select>

</mapper>